import java.util.Scanner;
import java.io.FileNotFoundException;
import java.io.FileInputStream;
import java.io.PrintStream;
import java.io.InputStream;
import java.util.Random;
public class TTT3D
{
    
    static int board[][][] =  new int[4][4][4];
    static int[] sums = new int[76];
    static final int[][][] lines =
    {
    {{0,0,0},{0,0,1},{0,0,2},{0,0,3}},  
    {{0,1,0},{0,1,1},{0,1,2},{0,1,3}},      
    {{0,2,0},{0,2,1},{0,2,2},{0,2,3}},       
    {{0,3,0},{0,3,1},{0,3,2},{0,3,3}},      
    {{1,0,0},{1,0,1},{1,0,2},{1,0,3}},       
    {{1,1,0},{1,1,1},{1,1,2},{1,1,3}},      
    {{1,2,0},{1,2,1},{1,2,2},{1,2,3}},       
    {{1,3,0},{1,3,1},{1,3,2},{1,3,3}},       
    {{2,0,0},{2,0,1},{2,0,2},{2,0,3}},       
    {{2,1,0},{2,1,1},{2,1,2},{2,1,3}},      
    {{2,2,0},{2,2,1},{2,2,2},{2,2,3}},         
    {{2,3,0},{2,3,1},{2,3,2},{2,3,3}},       
    {{3,0,0},{3,0,1},{3,0,2},{3,0,3}},       
    {{3,1,0},{3,1,1},{3,1,2},{3,1,3}},   
    {{3,2,0},{3,2,1},{3,2,2},{3,2,3}},         
    {{3,3,0},{3,3,1},{3,3,2},{3,3,3}},         
    };
    public static void main(String[] arrstring) throws FileNotFoundException
    {
        int n;
        int n2;
        int n3;
        int n4;
        Scanner scanner = new Scanner(System.in);
        Random random = new Random(1234);
        int[] arrn = new int[3];
        int[] arrn2 = new int[3];
        int[] arrn3 = new int[3];
        int n5 = 0;
        if (arrstring.length != 0) {
            System.out.println("getting initial setup from file");
            Scanner scanner2 = new Scanner(new FileInputStream(arrstring[0]));
            n3 = scanner2.nextInt();
            for (n4 = 0; n4 < n3; ++n4) {
                n = scanner2.nextInt() % 4;
                n2 = scanner2.nextInt() % 4;
                int n6 = scanner2.nextInt() % 4;
                int n7 = scanner2.nextInt();
                TTT3D.move((int)n, (int)n2, (int)n6, (int)n7);
            }
        } else {
            TTT3D.setAll((int)0);
        }
        boolean bl = false;
        while (!bl) {
            TTT3D.printBoardMarkers();
            n3 = 0;
            while (n3 == 0) {
                System.out.println("Type your move as one three digit number(lrc)");
                n4 = scanner.nextInt();
                arrn2[2] = n4 % 10 % 4;
                arrn2[1] = n4 / 10 % 10 % 4;
                arrn2[0] = n4 / 100 % 4;
                if (TTT3D.isEmpty((int[])arrn2)) {
                    n3 = 1;
                    TTT3D.move((int[])arrn2, (int)5);
                    continue;
                }
                System.out.println("Sorry that cell is occupied.");
            }
            TTT3D.compLineSums();
            if (TTT3D.findLineSum((int)20) != -1) {
                TTT3D.printBoardMarkers();
                System.out.println("Congradulations you won!");
                bl = true;
                continue;
            }
            n5 = TTT3D.findLineSum((int)3);
            if (n5 != -1) {
                TTT3D.move((int[])TTT3D.findEmptyCel((int[][])lines[n5]), (int)1);
                TTT3D.printBoardMarkers();
                System.out.println("Computer wins again!");
                bl = true;
                continue;
            }
            n5 = TTT3D.findLineSum((int)15);
            if (n5 != -1) {
                TTT3D.move((int[])TTT3D.findEmptyCel((int[][])lines[n5]), (int)1);
                continue;
            }
            arrn = TTT3D.findFork((int)1, (int[][][])lines, (int[])sums);
            if (arrn != null) {
                TTT3D.move((int[])arrn, (int)1);
                continue;
            }
            arrn = TTT3D.findFork((int)5, (int[][][])lines, (int[])sums);
            if (arrn != null) {
                TTT3D.move((int[])arrn, (int)1);
                continue;
            }
            n4 = random.nextInt(sums.length);
            n = 0;
            for (n2 = 0; n2 < sums.length && n == 0; ++n2) {
                switch (sums[n4]) {
		case 0: 
		case 1: 
		case 2: 
		case 5: 
		case 10: {
		    n = 1;
		    TTT3D.move((int[])TTT3D.findEmptyCel((int[][])lines[n4]), (int)1);
		}
                }
                n4 = (n4 + 1) % sums.length;
            }
            if (n != 0) continue;
            System.out.println("game is a draw");
	
	
    }
	public static void printBoard()
    {
	for(int i = 0; i < 4; i ++)
	    {
		
		for(int j = 0; j <4; j++)
		    {
	      
			for(int k = 0; k <4; k++)
			    {
				System.out.printf("%1d ", board[i][j][k]);
			    }
			System.out.printf("\n");
		    }
		System.out.printf("\n");
	    }
    }
    public static void printBoardWithMarks()
    {
	for(int i = 0; i <4; i++)
	    {
		for(int j = 0; j<4; j++)
		    {
			for(int k = j; k < 4; k++)
			    {
				System.out.printf("%1d ", TTT3D.marker((int) board[i][j][k]));
			    }
		    }
	    }
    }
    public static void printSums()
    {
	for(int i = 0; i < sums.length; i ++)
	    {
		System.out.println("The sum of line " + i + "is" + sums[i]);
	    }
    }
    public static void move(int i, int j, int k, int val)
    {
	TTT3D.board[i][j][k] = val;
    }
    public static void move(int[] arr, int a)
    {
	TTT3D.move(arr[0],arr[1],arr[2], a);
    }
    public static boolean isEqual( int[] a, int[] b)
    {
	for(int i = 0; i < a.length; i++)
	    {
		if(a[i] == b[i])
		    {
			return true;
		    }
		
	    }
	return false;
    }
    public static boolean isEmpty(int[] arr)
    {
	if(board[arr[0]][arr[1]][arr[2]]!=0) //checks if the slot is empty
	    {
		return false;
		
	    }	
	return true;
	    
    }
    public static char marker(int a)
    {
	if(a == 0)
	    {
		return '_'; //if slow is unoccupied which is represented by 0, it will return an underscore
	    }
	if(a == 1)
	    {
		return 'O'; // if slot is occupied by user which equals 1, it will return an O
	    }
	if(a == 5)
	    {
		return 'X'; //if slow is occcupied by computer which equals 5, it will return an X
	    }
	return '*';
    }
    public static void setAll(int a)
    {
	for(int i = 0; i < 4; i ++)
	    {
		for( int j = 0; j<4; j++)
		    {
			for(int k = 0; k<4; k++)
			    {
				TTT3D.move(i,j,k,a);
			    }
		    }
	    }
    }
    public static void computeLineSums()
    {
	for(int i = 0; i < sums.length; i++)
	    {
		TTT3D.sums[i] = 0;
		for(int j = 0; j< sums.length; j++)
		    {
			int[] arr = sums;
			int a = i;
			arr[a] += board[lines[i][j][0]][lines[i][j][1]][lines[i][j][2]];
		    }
	    }
    }
    public static int findLineSum(int sum)
    {
	for(int i = 0; i <sums.length; i++)
	    {
		if( sums[i] == sum)
		    {
			return i;
		    }
		 
	    }
	return -1;
    }
    public static int[] findEmptyCell( int[][]arr)
    {
	for(int i = 0; i < 4; i++)
	    {
		if(!TTT3D.isEmpty(arr[i]))
		    {
			return arr[i];
		    }
	    }
	return null;
    }
   
    public static int[] findCommonCell(int[][] arr, int [][] arr2)
    {
	for(int i = 0; i < arr.length; i++)
	    {
		for( int j = 0; j<arr.length; j++)
	    {
		if(!TTT3D.isEqual(arr[i],arr2[j]) || !TTT3D.isEmpty(arr[i]))
		    {
			return arr[i];
		    }
		    
	    }
	    }
    return null;
    }
   public static int[] isFork( int a, int[][][] arr, int[] arr2)
   {
       int[] arr3 = new int[3];
       for(int i = 0; i < arr2.length - 1; i++)
	   {
	       for(int j = i =1; j < arr2.length; j++)
		   {
		       return arr3;
		   }
		   
		       
		   
	   }
       return null;
   }

}
